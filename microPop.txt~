;ulogo file for $projectName

 constants [ [rpacket $1fc0] ]

 to ul-power
	 init-leds
	 redon
	 wait 10
	 redoff
 end
 
 to ul-init 
	redon	
	greenon 
	wait 10	 
	redoff
	greenoff
     
 end


 
 to ul-go 
 	 greenon 
	 wait 10
	 greenoff
	 loop
	 [	
		blueon	
		collect-data
		wait 10 
		blueoff
		wait 600		
	 ]
 
 end


to collect-data
 	let[MFC0 measureMFC0]
   	let[MFC1 measureMFC1]
   	let[MFC2 measureMFC2]
	let[MFC3 measureMFC3]
	let[MFC4 measureMFC4]
	let[MFC5 measureMFC5]  
   	let[MFC6 measureMFC6]
	let[MFC7 measureMFC7]	
	
	init-packet 55
   	fprint :MFC0
	fprint :MFC1
	fprint :MFC2
   	fprint :MFC3
   	fprint :MFC4
	fprint :MFC5
   	fprint :MFC6
	fprint :MFC7

   	add-checksum
end

to measureMFC7
      let [totalValue 0]	
      repeat 3 
      [
         let[totalValue :totalValue + readMFC7]
         wait 1
      ]
         let [averageValue ( :totalValue / 3 )]
         output :averageValue
      
end

to readMFC7
   output readADC 7
end

to measureMFC6
      let [totalValue 0]	
      repeat 3 
      [
         let[totalValue :totalValue + readMFC6]
         wait 1
      ]
         let [averageValue ( :totalValue / 3 )]
         output :averageValue
      
end

to readMFC6
   output readADC 6
end

to measureMFC5
      let [totalValue 0]	
      repeat 3 
      [
         let[totalValue :totalValue + readMFC5]
         wait 1
      ]
         let [averageValue ( :totalValue / 3 )]
         output :averageValue
      
end


to readMFC5
   output readADC 5
end

to measureMFC4
      let [totalValue 0]	
      repeat 3 
      [
         let[totalValue :totalValue + readMFC4]
         wait 1
      ]
         let [averageValue ( :totalValue / 3 )]
         output :averageValue
      
end

to readMFC4
   output readADC 4
end

to measureMFC3
      let [totalValue 0]	
      repeat 3 
      [
         let[totalValue :totalValue + readMFC3]
         wait 1
      ]
         let [averageValue ( :totalValue / 3 )]
         output :averageValue
      
end

to readMFC3
   output readADC 3
end

to measureMFC2
      let [totalValue 0]	
      repeat 3 
      [
         let[totalValue :totalValue + readMFC2]
         wait 1
      ]
         let [averageValue ( :totalValue / 3 )]
         output :averageValue
      
end

to readMFC2
   output readADC 2
end

to measureMFC1
      let [totalValue 0]	
      repeat 3 
      [
         let[totalValue :totalValue + readMFC1]
         wait 1
      ]
	 let [averageValue ( :totalValue / 3 )]
	 output :averageValue

end

to readMFC1
   output readADC 1
end

to measureMFC0      
      let [totalValue 0]	
      repeat 3 
      [
         let[totalValue :totalValue + readMFC0]
         wait 1
      ]
         let [averageValue ( :totalValue / 3 )]
         output :averageValue
      
end

to readMFC0
   output readADC 0
end





to calibrateADC :n 
   let [total 0]
   let [sample 10]
   repeat :sample	
   [
     let [adc (readADC :n)]
     let [total :total + :adc]
     print :adc      
     wait 10
   ]
   let [total :total / :sample]
   prs "Average:
   print :total
end




