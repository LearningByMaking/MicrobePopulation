;ulogo file for MicrobePopualtion
;ADC 7 = Power line from mudwatt
;ADC 6 = Date line from temp sensor
;DP8 = control line for heater relay

constants [ [rpacket $1fc0] ]
global 
[
	StartTemp 
	StopTemp 
	Index 
	WaitForEquilibrium 
	CollectionPeriod 
	CoolingPeriod 
	HeatingPeriod
	TemperatureSamples
	TemperaturePeriod
	MFCSamples
	MFCPeriod
]

to init-globals
	;the starting temperature as read from the sensor
	setStartTemp 0

	;the maximum temperature the experiment will be brought to
	setStopTemp 1200 

	;the time (in seconds) we wait after reaching the target temperature before starting to collect data  
	setWaitForEquilibrium 10

	;the time (in seconds) between collecting data points
	setCollectionPeriod 10  

	;the time (in seconds) we wait before checking the temperature while heating
	setHeatingPeriod 10
		
	;the time (in seconds) we wait before checking the temperature while heating
	setCoolingPeriod 10

	;the number of samples to take when reading a temperature
	setTemperatureSamples 5

	;the time (in seconds) to wait between temperature readings
	setTemperaturePeriod 1

	;the number of samples to take when reading a temperature
	setMFCSamples 5

	;the time (in seconds) to wait between temperature readings
	setMFCPeriod 1

	;the value that presents the number of increments of temperature tested so far. This should always start at zero
	setIndex 0
end

to ul-power
	 init-leds
	 redon
	 wait 10
	 redoff
end
 
to ul-init 
	redon	
	greenon 
   init-heater
	init-globals
	wait 10	 
	redoff
	greenoff     
end

to init-heater
 	dp8output
end
 
to ul-go 
	greenon 
	wait 10
	greenoff
	wait 10
	loop
	[	
		
	]
end


to collectDataAtTemperature
	blueon	
	wait (WaitForEquilibrium * 10)
	wait 10 
	blueoff
end

to collectDataPoint
	blueon	
	
	wait 10 
	blueoff
end

to heatToTemperature :target
	loop 
	[
		let [temp measureTemperature]
      if(:temp < :target)
		[
			heaterOn
			print :temp 
		]

		if(:temp > :target)
		[
			print :temp 			
			prs "heated
			heaterOff
			stop			
		]
		wait (HeatingPeriod * 10)
	]
end

to coolToTemperature :target
	heaterOff
	loop 
	[
		let [temp measureTemperature]
      if(:temp > :target)
		[			
			print :temp 
		]

		if(:temp < :target)
		[
			print :temp 			
			prs "cooled
			stop			
		]
		wait (CoolingPeriod * 10)
	]
end

to measureTemperature
	let [totalValue 0]	
	repeat TemperatureSamples 
	[
   	let[totalValue :totalValue + readTemperature]
		wait TemperaturePeriod
	]
	let [averageValue ( :totalValue / TemperatureSamples )]
	output :averageValue
end

to readTemperature
	output readADC 6
end

to measureMFC
	let [totalValue 0]	
	repeat MFCSamples 
	[
   	let[totalValue :totalValue + readMFC]
		wait MFCPeriod
	]
	let [averageValue ( :totalValue / MFCSamples )]
	output :averageValue
end

to readMFC
	output readADC 7
end

to heaterOn
	dp8on
end

to heaterOff
	dp8off
end





