;ulogo file for MFC
;ADC 7 = Power line from mudwatt
;ADC 6 = Date line from temp sensor
;DP8 = control line for heater relay

constants [ [rpacket $1fc0] ]
global 
[
	StartTemp 
	StopTemp 
	Index 
	StepSize
	EquilibriumTime 
	CollectionPeriod 
	CoolingPeriod 
	HeatingPeriod
	TemperatureSamples
	TemperaturePeriod
	MFCSamples
	MFCPeriod
	DebugMode
]

to init-globals

	;the time (in seconds) we wait after reaching the target temperature before starting to collect data  
	setEquilibriumTime 10

	;the time (in seconds) between collecting data points
	setCollectionPeriod 60  

	;the time (in seconds) we wait before checking the temperature while heating
	setHeatingPeriod 10
		
	;the time (in seconds) we wait before checking the temperature while heating
	setCoolingPeriod 10

	;the number of samples to take when reading a temperature
	setTemperatureSamples 3

	;the time (in seconds) to wait between temperature readings
	setTemperaturePeriod 1

	;the number of samples to take when reading a temperature
	setMFCSamples 1

	;the time (in seconds) to wait between temperature readings
	setMFCPeriod 1

	;the amount (in ADU) to increase the temperature between readings
	setStepSize 50

	;the value that presents the number of increments of temperature tested so far. This should always start at zero
	setIndex 0

	;the starting temperature as read from the sensor
	setStartTemp measureTemperature

	;the maximum temperature the experiment will be brought to
	setStopTemp 1100 

	;controls whether debug messages are printed to the console by uLogo 1=true 0=false
	setDebugMode 0
end

to ul-power
 	init-leds
 	redon
 	wait 10
 	redoff
end
 
to ul-init 
	yellowOn
   init-heater
	init-globals
	wait 10	 
	yellowOff    
end

to init-heater
 	dp8output
	dp8off
end
 
to ul-go 
	greenon 
	wait 10
	greenoff
	wait 10
	loop
	[	
		let[targetTemp StartTemp + Index]
		heatToTemperature :targetTemp
		collectDataAtTemperature :targetTemp
		setIndex Index + StepSize
		if(MeasureTemperature > StopTemp)
		[
			heaterOff
			alloff			
			stop
		]
	]
end


to collectDataAtTemperature :targetTemp
	waitForEquilibrium :targetTemp
	greenOn
	repeat 3
	[
		collectDataPoint
		regulateTemp :targetTemp
		wait 60
	]
	greenOff
end

to waitForEquilibrium :targetTemp
	yellowOn	
	repeat ( EquilibriumTime / 10 ) 
	[	
		regulateTemp :targetTemp
		wait 10
	]
	yellowOff
end

to collectDataPoint
	blueon	
	init-packet 55
	let[temp measureTemperature]
	let[MFC measureMFC]	
	fprint :temp
	fprint :MFC
	add-checksum		
	wait 10 
	blueoff
end

to regulateTemp :targetTemp
	let [temp measureTemperature]
	if(:temp > :targetTemp) 
	[
		heaterOff
	]
	if(:temp < :targetTemp)
	[
		heaterOn
	]
end

to heatToTemperature :target
	redon	
	loop 
	[
		let [temp measureTemperature]
      if(:temp < :target)
		[
			heaterOn			
		]

		if(:temp > :target)
		[				
			heaterOff
			redoff
			stop			
		]
		wait (HeatingPeriod * 10)
	]
	
end

to coolToTemperature :target
	heaterOff
	loop 
	[
		let [temp measureTemperature]      

		if(:temp < :target)
		[		
			stop			
		]
		wait (CoolingPeriod * 10)
	]
end

to measureTemperature
	let [totalTemp 0]	
	repeat TemperatureSamples 
	[
   	let[totalTemp :totalTemp + readTemperature]
		wait TemperaturePeriod * 10
	]
	let [averageTemp ( :totalTemp / TemperatureSamples )]
	output :averageTemp
end

to readTemperature
	output readADC 7
end

to measureMFC
	let [totalMFC 0]	
	repeat MFCSamples 
	[
   	let[totalMFC :totalMFC + readMFC]
		wait MFCPeriod * 10
	]
	let [averageMFC ( :totalMFC / MFCSamples )]
	output :averageMFC
end

to readMFC
	output (readADC 5 - readADC 6)
end

to heaterOn
	dp8on
end

to heaterOff
	dp8off
end

to yellowOn
	redon	
	greenon 
end

to yellowOff
	redoff
	greenoff 
end





