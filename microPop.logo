;jlogo file for BasicBoard written by: ANONYMOUS


to microPop
 	print "|starting microPop| 
 	init-microPop
 	loop 
 	[
 		see-packet 
 		wait 150 
 	]
 end
 
to init-microPop
  init-calibration
  init-hardware 
  make "check 0 
  make "oldcheck 0 
  make "start-time int ( now / 1000 )  
end
 
to init-hardware
   stopvm ;stop vm makes sure the board is not running
   ul-power
   wait 15
   ul-init         
   wait 15	
   ul-go
   wait 15	
end 

to init-calibration
  make "temp_cal [662 7 1571 83]     ; pairs (adc,temp)
  make "volt_cal [0 0 4095 3.3]      ; pairs (adc,volt)
end

to see-packet
  make "packet-bytes collect-packet  
  if (count :packet-bytes) > 0 
  [    
    process-header     
  ]
    
end


to process-header 
  let [nws ((first :packet-bytes) / 2) + 1] 
  make "check wnth :nws :packet-bytes    
  if not (:check = :oldcheck) 
  [     
    make "type nth 1 :packet-bytes 
    if (:type = 55) [ process-data-packet ] 
  ]
  make "oldcheck :check 
end

to process-data-packet
 
  make "Volt1 wnth 5 :packet-bytes 
  make "Volt1 calibrate :Volt1 :volt_cal  
  make "Volt2 wnth 6 :packet-bytes 
  make "Volt2 calibrate :Volt2 :volt_cal  
  make "Volt3 wnth 7 :packet-bytes 
  make "Volt3 calibrate :Volt3 :volt_cal
  make "Volt4 wnth 8 :packet-bytes 
  make "Volt4 calibrate :Volt4 :volt_cal 
  make "Volt5 wnth 9 :packet-bytes 
  make "Volt5 calibrate :Volt5 :volt_cal 
  make "Volt6 wnth 10 :packet-bytes 
  make "Volt6 calibrate :Volt6 :volt_cal 
  make "Volt7 wnth 11 :packet-bytes 
  make "Volt7 calibrate :Volt7 :volt_cal 
  make "Volt8 wnth 12 :packet-bytes 
  make "Volt8 calibrate :Volt8 :volt_cal 

  make "time elapsedTime 
  
  print (se "Time :time)
  print (se "Exp1 :Volt1 "V )
  print (se "Exp2 :Volt2 "V )
  print (se "Exp3 :Volt3 "V )
  print (se "Exp4 :Volt4 "V ) 
  print (se "Exp5 :Volt5 "V )
  print (se "Exp6 :Volt6 "V )
  print (se "Exp7 :Volt7 "V )
  print (se "Exp8 :Volt8 "V ) 
  cUp 8

end

to calibrate :n :m
  let [adc0 nth 0 :m]
  let [adc1 nth 2 :m]
  let [val0 nth 1 :m]
  let [val1 nth 3 :m]
  let [slope (:val1 - :val0) / (:adc1 - :adc0)] 
  output  ((:n - :adc0) * :slope) + :val0
end

to valueToADC :n :m
  let [val0 nth 0 :m]
  let [val1 nth 2 :m]
  let [adc0 nth 1 :m]
  let [adc1 nth 3 :m]
  let [slope (:val1 - :val0) / (:adc1 - :adc0)] 
  output  ((:n - :adc0) * :slope) + :val0
end

to plot-adc
   x-data "|Elapsed Time (seconds)| :time-list ;
   y-data "|ADC reading| :adc-list 
   plot 2 
   display "|-geometry 600x400+1000+100| 
  
end

to elapsedTime
   output  int ( now / 1000 ) - :start-time ;find differerence between current time and start time
end

to addTimeToList :time
  make "time-list (se :time-list :time) 
end

to addADCToList :adc
  make "adc-list (se :adc-list :adc) 
end

to collect-packet
output rl $1fc0 30
end

