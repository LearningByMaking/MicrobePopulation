;jlogo file for BasicBoard written by: ANONYMOUS


to microPop
 	print "|starting microPop| 
	make "fileName exec "|sh genFileName.sh|	
	init-microPop
 	loop 
 	[
 		see-packet 
 		wait 100
 	]
 end
 
to init-microPop
  init-calibration
  init-hardware 
  make "resistance 3000
  make "check 0 
  make "oldcheck 0 
  make "start-time int ( now / 1000 )  
end
 
to init-hardware
   stopvm ;stop vm makes sure the board is not running
   ul-power
   wait 15
   ul-init         
   wait 15	
   ul-go
   wait 15	
end 

to init-calibration
  make "temp_cal [662 7 1571 83]     ; pairs (adc,temp)
  make "volt_cal [0 0 4095 3.3]      ; pairs (adc,volt)
end

to see-packet
  make "packet-bytes collect-packet  
  process-header      
end


to process-header 
   let [length (first :packet-bytes) / 2 ]  
	let [nws :length + 1] 
	make "check wnth :nws :packet-bytes  
	if not (:check = :oldcheck) 
	[		   
		make "type nth 1 :packet-bytes 
 		if (:type = 55) 
		[ 
			if(:length > 10)
			[
				process-data-packet 
			]
		] 		
	]
	make "oldcheck :check 

end

to process-data-packet
	
 
   make "Volt0 wnth 4 :packet-bytes 
   make "Volt0 calibrate :Volt0 :volt_cal 
	make "Power0 voltageToPower :Volt0 :resistance
	
	make "Volt1 wnth 5 :packet-bytes 
   make "Volt1 calibrate :Volt1 :volt_cal
	make "Power1 voltageToPower :Volt1 :resistance	  
  
	make "Volt2 wnth 6 :packet-bytes 
  	make "Volt2 calibrate :Volt2 :volt_cal  
	make "Power2 voltageToPower :Volt2 :resistance	  
  
	make "Volt3 wnth 7 :packet-bytes 
  	make "Volt3 calibrate :Volt3 :volt_cal
	make "Power3 voltageToPower :Volt3 :resistance
  
	make "Volt4 wnth 8 :packet-bytes 
	make "Volt4 calibrate :Volt4 :volt_cal
	make "Power4 voltageToPower :Volt4 :resistance 
  
	make "Volt5 wnth 9 :packet-bytes 
   make "Volt5 calibrate :Volt5 :volt_cal 
	make "Power5 voltageToPower :Volt5 :resistance
 
   make "Volt6 wnth 10 :packet-bytes 
   make "Volt6 calibrate :Volt6 :volt_cal 
	make "Power6 voltageToPower :Volt6 :resistance
 
 	make "Volt7 wnth 11 :packet-bytes 
   make "Volt7 calibrate :Volt7 :volt_cal 
	make "Power7 voltageToPower :Volt7 :resistance

   make "time elapsedTime 	
   
   print ("|___________________|)
   print (se "Time :time)
   print (se "Exp0 round :Power0 )
 	print (se "Exp1 round :Power1 )
   print (se "Exp2 round :Power2 )
   print (se "Exp3 round :Power3 )
   print (se "Exp4 round :Power4 ) 
   print (se "Exp5 round :Power5 )
   print (se "Exp6 round :Power6 )
   print (se "Exp7 round :Power7 )

  	prfopen :fileName 	
  	prfprint (se :time :Power0 :Power1 :Power2 :Power3 :Power4 :Power5 :Power6 :Power7)
  	prfclose
   

end

to calibrate :n :m
  let [adc0 nth 0 :m]
  let [adc1 nth 2 :m]
  let [val0 nth 1 :m]
  let [val1 nth 3 :m]
  let [slope (:val1 - :val0) / (:adc1 - :adc0)] 
  output  ((:n - :adc0) * :slope) + :val0
end

to valueToADC :n :m
  let [val0 nth 0 :m]
  let [val1 nth 2 :m]
  let [adc0 nth 1 :m]
  let [adc1 nth 3 :m]
  let [slope (:val1 - :val0) / (:adc1 - :adc0)] 
  output  ((:n - :adc0) * :slope) + :val0
end

to voltageToPower :voltage :resistance
	output :voltage * :voltage / :resistance * 1000000
end

to plot-adc
   x-data "|Elapsed Time (seconds)| :time-list ;
   y-data "|ADC reading| :adc-list 
   plot 2 
   display "|-geometry 600x400+1000+100|  
end

to elapsedTime
   output  int ( now / 1000 ) - :start-time ;find differerence between current time and start time
end

to addTimeToList :time
  make "time-list (se :time-list :time) 
end

to addADCToList :adc
  make "adc-list (se :adc-list :adc) 
end

to collect-packet
   output rl $1fc0 30
end

to print-packet
  make "wp packet-words :packet-bytes
  print ( se word "T bf 100 + :type round now / 1000 :wp  ) 
end
